#if UNITY_2017
using NUnit.Framework;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using UnityEngine.TestTools;

#if UNITY_EDITOR

public class Test_ComponentChild : MonoBehaviour { }
public class Test_ComponentChild_DerivedDictionaryItem : MonoBehaviour, IDictionaryItem<Test_ComponentParents.ETestChildObject>
{
    public Test_ComponentParents.ETestChildObject IDictionaryItem_GetKey()
    {
        return name.ConvertEnum<Test_ComponentParents.ETestChildObject>();
    }
}

[Category("StrixLibrary")]
public class Test_ComponentParents : MonoBehaviour
{
    public enum ETestChildObject
    {
        TestObject_1,
        TestObject_2,
        TestObject_3,

        TestObject_Other_FindString,
        TestObject_Other_FindEnum,

        MAX,
    }


    [GetComponentInChildren]
    public List<Test_ComponentChild> p_listTest = new List<Test_ComponentChild>();

    [GetComponentInChildren]
    public Dictionary<string, Test_ComponentChild> p_mapTest_KeyIsString = new Dictionary<string, Test_ComponentChild>();
    [GetComponentInChildren]
    public Dictionary<ETestChildObject, Test_ComponentChild> p_mapTest_KeyIsEnum = new Dictionary<ETestChildObject, Test_ComponentChild>();

    [GetComponentInChildren("TestObject_Other_FindString")]
    public Test_ComponentChild p_pChildComponent_FindString;
    [GetComponentInChildren(ETestChildObject.TestObject_Other_FindEnum)]
    public Test_ComponentChild p_pChildComponent_FindEnum;

    public void Awake()
    {
        SCManagerGetComponent.DoUpdateGetComponentAttribute(this);
    }

    [UnityTest]
    static public IEnumerator Test_GetComponentAttribute()
    {
        GameObject pObjectParents = new GameObject("Test");

        // GetComponent 대상인 자식 추가
        for (int i = 0; i < (int)Test_ComponentParents.ETestChildObject.MAX; i++)
        {
            GameObject pObjectChild = new GameObject(((Test_ComponentParents.ETestChildObject)i).ToString());
            pObjectChild.transform.SetParent(pObjectParents.transform);
            pObjectChild.AddComponent<Test_ComponentChild>();
        }

        // 자식을 전부 추가한 뒤에 페런츠에 추가한다.
        // 추가하자마자 Awake로 자식을 찾기 때문
        Test_ComponentParents pParents = pObjectParents.AddComponent<Test_ComponentParents>();
        pParents.Awake();

        yield return null;

        // Getcomponent Attribute가 잘 작동했는지 체크 시작!!
        Assert.NotNull(pParents.p_pChildComponent_FindEnum);
        Assert.NotNull(pParents.p_pChildComponent_FindString);

        Assert.IsTrue(pParents.p_pChildComponent_FindString.name == Test_ComponentParents.ETestChildObject.TestObject_Other_FindString.ToString());
        Assert.IsTrue(pParents.p_pChildComponent_FindEnum.name == Test_ComponentParents.ETestChildObject.TestObject_Other_FindEnum.ToString());

        Assert.IsTrue(pParents.p_listTest.Count == (int)Test_ComponentParents.ETestChildObject.MAX);

        Assert.IsTrue(pParents.p_mapTest_KeyIsEnum.Count == 5);
        Assert.IsTrue(pParents.p_mapTest_KeyIsString.Count == 5);

        var pIterString = pParents.p_mapTest_KeyIsString.GetEnumerator();
        while (pIterString.MoveNext())
        {
            Assert.IsTrue(pIterString.Current.Key == pIterString.Current.Value.name.ToString());
        }

        var pIterEnum = pParents.p_mapTest_KeyIsEnum.GetEnumerator();
        while (pIterEnum.MoveNext())
        {
            Assert.IsTrue(pIterEnum.Current.Key.ToString() == pIterEnum.Current.Value.name.ToString());
        }
    }

    [UnityTest]
    static public IEnumerator Test_GetComponentInChildren_DeriveEnum()
    {
        GameObject pObjectParents = new GameObject("Test");

        // GetComponent 대상인 자식 추가
        for (int i = 0; i < (int)Test_ComponentParents.ETestChildObject.MAX; i++)
        {
            GameObject pObjectChild = new GameObject(((Test_ComponentParents.ETestChildObject)i).ToString());
            pObjectChild.transform.SetParent(pObjectParents.transform);
            pObjectChild.AddComponent<Test_ComponentChild_DerivedDictionaryItem>();
        }

        // 자식을 전부 추가한 뒤에 페런츠에 추가한다.
        // 추가하자마자 Awake로 자식을 찾기 때문
        Test_ComponentParents pParents = pObjectParents.AddComponent<Test_ComponentParents>();
        pParents.Awake();

        yield return null;

        var pIterEnum = pParents.p_mapTest_KeyIsEnum.GetEnumerator();
        while (pIterEnum.MoveNext())
        {
            Assert.IsTrue(pIterEnum.Current.Key.ToString() == pIterEnum.Current.Value.name.ToString());
        }
    }
}
#endif
#endif