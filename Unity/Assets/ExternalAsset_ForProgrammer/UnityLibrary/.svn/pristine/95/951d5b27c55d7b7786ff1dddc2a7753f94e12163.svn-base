#if UNITY_2017

using NUnit.Framework;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UnityEngine.TestTools;

public class 네트워크_UDP_테스트 : CManagerNetworkUDPBase<네트워크_UDP_테스트, 네트워크_UDP_테스트.STestSession, 네트워크_UDP_테스트.SPacketHeader>
{
    const string const_strPacketHeaderCheck = "패킷헤더체크";

    public enum ETestPacketType : byte
    {
        None,
        Test, Test2,
    }

    public class STestSession : CNetworkSession
    {
    }

    [System.Serializable]
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
    public struct SPacketHeader : INetworkPacketHeader
    {
        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 100)]
        public string strValue;
        public int iPayload;
        public ETestPacketType ePacketType;

        static public SPacketHeader CreateHeader(ETestPacketType ePacketType, int iPayload)
        {
            SPacketHeader pPacketHeader = new SPacketHeader(const_strPacketHeaderCheck, ePacketType);
            pPacketHeader.iPayload = iPayload;
            return pPacketHeader;
        }

        public int INetworkPacketHeader_Get_Payload()
        {
            return iPayload;
        }

        public void INetworkPacketHeader_Set_Header(int iPayload, int iPacketType)
        {
            this.iPayload = iPayload;
            this.ePacketType = (ETestPacketType)iPacketType;
        }

        public SPacketHeader(string strValue, ETestPacketType ePacketType)
        {
            this.strValue = strValue;
            this.iPayload = 0;
            this.ePacketType = ePacketType;
        }
    }

    [System.Serializable]
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
    public struct SPacketTest_Struct
    {
        public int iValue;
        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 100)]
        public string strValue;

        static public SPacketTest_Struct Dummy()
        {
            return new SPacketTest_Struct(0, "");
        }

        public SPacketTest_Struct(int iValue, string strValue)
        {
            this.iValue = iValue;
            this.strValue = strValue;
        }
    }

    [System.Serializable]
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
    public class SPacketTest_Class : INetworkPacket
    {
        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 100)]
        public string strValue;
        public float fValue;

        static public SPacketTest_Struct Dummy()
        {
            return new SPacketTest_Struct(0, "");
        }

        public int INetworkPacket_Get_PacketID()
        {
            return (int)ETestPacketType.Test2;
        }

        public SPacketTest_Class(float fValue, string strValue)
        {
            this.strValue = strValue;
            this.fValue = fValue;
        }
    }

    [UnityTest]
    [Category("StrixLibrary")]
    public IEnumerator 구조체에서_바이트변환_다시_구조체로변환_테스트()
    {
        SPacketTest_Struct pPacket1 = new SPacketTest_Struct(1, "테스트Test123!@#");
        SPacketTest_Struct pPacket2 = new SPacketTest_Struct();

        Assert.AreNotEqual(pPacket1, pPacket2);

        byte[] arrData = SCByteHelper.ConvertByteArray(pPacket1);
        SCByteHelper.ConvertPacket(arrData, out pPacket2);

        Assert.AreEqual(pPacket1, pPacket2);

        yield return null;
    }


    const string strTestTargetIP = "127.0.0.1";
    const int iTestPort = 9999;

    static SPacketTest_Struct pPacketCheckRecieve;
    static SPacketTest_Class pPacketCheckRecieve2;
    static bool bIsRecievePacket_OnFail;
    static bool bIsRecievePacket_OnSuccess;

    [UnityTest]
    [Category("StrixLibrary")]
    public IEnumerator 로컬_UDP송수신_기본테스트()
    {
        int iTestPortRandom = iTestPort + 10;
        pPacketCheckRecieve = SPacketTest_Struct.Dummy();
        Assert.AreEqual(pPacketCheckRecieve, SPacketTest_Struct.Dummy());

        네트워크_UDP_테스트.EventMakeSingleton();
        네트워크_UDP_테스트.instance.DoStartListen_UDP(iTestPortRandom);

        bIsRecievePacket_OnFail = false;
        SPacketTest_Struct pSendPacket = new SPacketTest_Struct(1, "보냈다");

        // 보내기 전에는 체크용 패킷과 보낼 패킷과 일치하지 않는다.
        Assert.AreNotEqual(pPacketCheckRecieve.iValue, pSendPacket.iValue);
        Assert.AreNotEqual(pPacketCheckRecieve.strValue, pSendPacket.strValue);

        네트워크_UDP_테스트.instance.DoSendPacket(strTestTargetIP, iTestPortRandom, pSendPacket);
        while (bIsRecievePacket_OnFail == false)
        {
            yield return null;
        }

        // 패킷을 받은 뒤에는 체크용 패킷과 보낼 패킷이 일치한다.
        Assert.AreEqual(pPacketCheckRecieve.iValue, pSendPacket.iValue);
        Assert.AreEqual(pPacketCheckRecieve.strValue, pSendPacket.strValue);
    }

    [UnityTest]
    [Category("StrixLibrary")]
    public IEnumerator 로컬_UDP송수신_패킷헤더및_패킷디큐_테스트()
    {
        int iTestPortRandom = iTestPort + 10;
        pPacketCheckRecieve = SPacketTest_Struct.Dummy();
        Assert.AreEqual(pPacketCheckRecieve, SPacketTest_Struct.Dummy());

        네트워크_UDP_테스트.EventMakeSingleton();
        네트워크_UDP_테스트.instance.DoStartListen_UDP(iTestPortRandom);

        bIsRecievePacket_OnFail = false;
        SPacketTest_Struct pSendPacket = new SPacketTest_Struct(2, "보냈다");

        네트워크_UDP_테스트.instance.DoSendPacket(strTestTargetIP, iTestPortRandom, pSendPacket);
        while (bIsRecievePacket_OnFail == false)
        {
            yield return null;
        }

        // 리시브는 받았지만, 헤더부터 보내지 않았기에 갱신이 안된다.
        /// <see cref="네트워크_UDP_테스트.OnFirstPacket_IsNot_PacketHeader"/>
        Assert.AreNotEqual(pPacketCheckRecieve.iValue, pSendPacket.iValue);
        Assert.AreNotEqual(pPacketCheckRecieve.strValue, pSendPacket.strValue);

        네트워크_UDP_테스트.instance.DoSendPacket(strTestTargetIP, iTestPortRandom, SPacketHeader.CreateHeader(ETestPacketType.Test, SCByteHelper.SizeOf<SPacketTest_Struct>()));
        네트워크_UDP_테스트.instance.DoSendPacket(strTestTargetIP, iTestPortRandom, pSendPacket);
        bIsRecievePacket_OnSuccess = false;
        while (bIsRecievePacket_OnSuccess == false)
        {
            yield return null;
        }
        Assert.AreEqual(pPacketCheckRecieve.iValue, pSendPacket.iValue);

        // 클래스 및 헤더 동시에 보내기 테스트
        SPacketTest_Class pSendPacket_Class = new SPacketTest_Class(0.1f, "보냈다-클래스");
        pPacketCheckRecieve2 = null;
        Assert.AreEqual(pPacketCheckRecieve2, null);

        네트워크_UDP_테스트.instance.DoSendPacket_IncludeHeader(strTestTargetIP, iTestPortRandom, SPacketHeader.CreateHeader(ETestPacketType.None, 0), pSendPacket_Class);
        bIsRecievePacket_OnSuccess = false;
        while (bIsRecievePacket_OnSuccess == false)
        {
            yield return null;
        }

        Assert.AreEqual(pPacketCheckRecieve2.fValue, pSendPacket_Class.fValue);
        Assert.AreEqual(pPacketCheckRecieve2.strValue, pSendPacket_Class.strValue);
    }

    [Test]
    [Category("StrixLibrary")]
    public void 링버퍼_인큐_디큐_테스트()
    {
        SPacketTest_Struct pPacketTest = new SPacketTest_Struct(1, "인큐_디큐_테스트");
        SPacketTest_Struct pPacketTest2 = new SPacketTest_Struct(2, "더미데이터");

        byte[] arrPacketData = SCByteHelper.ConvertByteArray(pPacketTest);
        int iDataSize = arrPacketData.Length;

        _pRecvBuffer.Enqueue(arrPacketData);

        Assert.AreNotEqual(pPacketTest.iValue, pPacketTest2.iValue);
        Assert.AreNotEqual(pPacketTest.strValue, pPacketTest2.strValue);

        byte[] arrPacketData2 = _pRecvBuffer.Dequeue_OrNull(iDataSize);
        arrPacketData2.Convert_ToStruct(out pPacketTest2);

        Assert.AreEqual(pPacketTest.iValue, pPacketTest2.iValue);
        Assert.AreEqual(pPacketTest.strValue, pPacketTest2.strValue);
    }


    // 기본 UDP 송수신 테스트 코드를 위해 전개했으나,
    // 본래 여기에서는 보통 해당 패킷을 보낸 IP를 블랙 리스트 후보에 올리고, 해당 패킷은 삭제해야 한다.
    protected override void OnFirstPacket_IsNot_PacketHeader(byte[] arrRecieveData, string strIP, out bool bIsDeletePacket)
    {
        /// <see cref="네트워크_UDP_테스트.로컬_UDP송수신_기본테스트"/>
        bIsDeletePacket = true;
        SPacketTest_Struct pPacket;
        if (arrRecieveData.Convert_ToStruct(out pPacket))
        {
            if (pPacket.iValue == 1)
            {
                pPacketCheckRecieve = pPacket;
                네트워크_UDP_테스트.instance.DoSendPacket(strTestTargetIP, iTestPort, new SPacketTest_Struct(2, "받았다"));
            }
        }

        bIsRecievePacket_OnFail = true;
    }

    // 프로젝트 레벨에선, 페킷 헤더 내용을 토대로 페이로드에 있는 패킷을 파싱해야 한다.
    // 테스트 코드이므로 생략
    protected override void OnRecievePacket(STestSession pSessionSender, SPacketHeader pPacketHeader, byte[] arrRecieveData, string strIP)
    {
        /// <see cref="네트워크_UDP_테스트.로컬_UDP송수신_패킷헤더및_패킷디큐_테스트"/>
        switch (pPacketHeader.ePacketType)
        {
            case ETestPacketType.Test:
                {
                    SPacketTest_Struct pPacketTest1;
                    if (arrRecieveData.Convert_ToStruct(out pPacketTest1))
                    {
                        pPacketCheckRecieve = pPacketTest1;
                    }
                }

                break;

            case ETestPacketType.Test2:
                {
                    SPacketTest_Class pPacketTest2;
                    if (arrRecieveData.Convert_ToStruct(out pPacketTest2))
                    {
                        pPacketCheckRecieve2 = pPacketTest2;
                    }
                }

                break;

            // 정해진 패킷 타입이 아닌 경우 - 본래 코드에선 에러 처리해야되나, 테스트이므로 공란
            default:
                break;
        }

        bIsRecievePacket_OnSuccess = true;
    }

    protected override void OnInitManager(out int iTimeOutSecond, out int iTimeDeleteSessionSecond)
    {
        iTimeOutSecond = 3;
        iTimeDeleteSessionSecond = 5;
    }

    protected override void OnInitSession(STestSession pSessionSender, SPacketHeader pPacketHeader)
    {
    }
}
#endif